local ReplicatedStorage = game:GetService('ReplicatedStorage')
local HttpService = game:GetService('HttpService')
local DataStoreService = game:GetService('DataStoreService')
local Players = game:GetService('Players')
local RemoteService = ReplicatedStorage:WaitForChild('RemoteService')
local ServerStorage = game:GetService("ServerStorage")
local PhysicsService = game:GetService('PhysicsService')

_G.GameVersion = '1.0-Alpha'.. game.PlaceVersion


--[[Update Reminders

-Change StarterCharacter Hair name to 'Hair'
-Remove residual Modules

]]
local InterpreterService = ReplicatedStorage:WaitForChild('InterpreterService')
local RaceModule = require(InterpreterService.RaceModule)
local BreakerModule = require(InterpreterService.BreakerModule)
local GenderModule = require(InterpreterService.GenderModule)
local HairColorModule = require(InterpreterService.HairColorModule)
local RaceSizeModule = require(ReplicatedStorage.RaceSizeModule)

local CharacterPresets = ServerStorage:WaitForChild('CharacterPresets')

local FemalePreset  = CharacterPresets.FemaleTemp
local MalePreset = CharacterPresets.MaleTemp

local CharacterSizeAttributes = {'BodyWidthScale','BodyDepthScale','BodyHeightScale','BodyProportionScale','BodyTypeScale','BodyWidthScale','HeadScale'}

Players.PlayerAdded:Connect(function(Player)
	local DataStore = DataStoreService:GetOrderedDataStore(Player.UserId)
	local PlayerData = Instance.new('Folder')
	local CharacterData = Instance.new('Folder')
	local IsInGame = Instance.new('BoolValue')
	local ActiveSave = Instance.new('NumberValue')
	
	PlayerData.Name = 'PlayerData'
	PlayerData.Parent = Player
		
	CharacterData.Name = 'CharacterData'
	CharacterData.Parent = PlayerData
	
	IsInGame.Name = 'IsInGame'
	IsInGame.Parent = Player
	IsInGame.Value = false
	
	ActiveSave.Name = 'ActiveSave'
	ActiveSave.Parent = Player
	
	
	for i = 1,3 do
		--Definitions & Instance creations
		local Strength = Instance.new('IntValue')
		local Magic = Instance.new('IntValue')
		local Spirit = Instance.new('IntValue')
		local Race = Instance.new('StringValue')
		local Multiplier = Instance.new('NumberValue')
		
		Strength.Name = 'Strength'..i
		Strength.Parent = PlayerData
		Strength.Value = 0
		
		Magic.Name = 'Magic'..i
		Magic.Parent = PlayerData
		Magic.Value = 0
		
		Spirit.Name = 'Spirit'..i
		Spirit.Parent = PlayerData
		Spirit.Value = 0
		
		Race.Name = 'Race'..i
		Race.Parent = PlayerData
		
		Multiplier.Name = 'Multiplier'..i
		Multiplier.Parent = PlayerData
		Multiplier.Value = 1
		
		
		
		--DataStore retrieval 
		local HasData 
		local success = pcall(function()
			HasData = DataStore:GetAsync('HasData'..i)	
		end)
		
		if success and HasData then
			pcall(function()
				Strength.Value = DataStore:GetAsync('Strength'..i)
				Spirit.Value = DataStore:GetAsync('Spirit'..i)
				Magic.Value = DataStore:GetAsync('Magic'..i)
				Race.Value = DataStore:GetAsync('Race'..i)
				
				--Multiplier Calculation
				local CalcStore = {}
				local HasDemon = DataStore:GetAsync('HasDemonBlood'..i)
				table.insert(CalcStore,#CalcStore+1,{['HasDemonBlood'] = HasDemon})
				for c,x in pairs(CalcStore) do
					if x then
						Multiplier.Value = Multiplier.Value + BreakerModule[i]
					end
				end
				
			end)
		end
		
		--Character Handler
		local Gender = Instance.new('StringValue')
		local HairColor = Instance.new('StringValue')
		local SkinColor = Instance.new('BrickColorValue')
		local Face = Instance.new('IntValue')
		local HairType = Instance.new('IntValue')
		local HasChar = Instance.new('BoolValue')
		
		Gender.Name = 'Gender'..i
		Gender.Parent = CharacterData
		Gender.Value = 'Male'
		
		HairColor.Name = 'HairColor'..i
		HairColor.Parent = CharacterData
		HairColor.Value = 'Black'
		
		SkinColor.Name = 'SkinColor'..i
		SkinColor.Parent = CharacterData
		SkinColor.Value = BrickColor.new('Nougat')
		
		Face.Name = 'Face'..i
		Face.Parent = CharacterData
		Face.Value = 1
		
		HairType.Name = 'HairType'..i
		HairType.Parent = CharacterData
		HairType.Value = 1
		
		HasChar.Name = 'HasChar'..i
		HasChar.Parent = CharacterData
		HasChar.Value = false
		
		if success and HasData then
			pcall(function()
				Gender.Value = GenderModule[DataStore:GetAsync('Gender'..i)]
				HairColor.Value = HairColorModule[DataStore:GetAsync('HairColor'..i)]
				SkinColor.Value = BrickColor.new(DataStore:GetAsync('SkinColor'..i))
				Face.Value = DataStore:GetAsync('Face'..i)
				HairType.Value = DataStore:GetAsync('HairType'..i)
				HasChar.Value = true
			end)
		end
		
		
		
	end
	Player.CharacterAdded:Connect(function(Character)
			if IsInGame.Value then
				Character.Hair:Destroy()
				local v1 = ActiveSave.Value
				local v2 = CharacterData['Gender'..v1].Value
				local v3 = CharacterData['HairColor'..v1].Value
				local v4 = CharacterData['SkinColor'..v1].Value
				local v5 = CharacterData['Face'..v1].Value
				local v6 = CharacterData['HairType'..v1].Value
				local v7 = PlayerData['Race'..v1].Value
				for i,v in pairs(Character:GetDescendants()) do
					if v:IsA('BasePart') then
						PhysicsService:SetPartCollisionGroup(v,'Players')
						v.BrickColor = v4
					end
				end
				
				local CharacterStats = Instance.new('Folder')
				local Stamina = Instance.new('IntValue')
				local Mana = Instance.new('IntValue')
				
				CharacterStats.Name = 'CharacterStats'
				CharacterStats.Parent = Character
				
				Stamina.Name = 'Stamina'
				Stamina.Parent = CharacterStats
				Stamina.Value = 100
				
				Mana.Name = 'Mana'
				Mana.Parent = CharacterStats
				Mana.Value = 100
				
				local Race = PlayerData['Race'..v1]
				
				if v2 == 'Female' then
					
				end
				
				for i,v in pairs(CharacterSizeAttributes) do
					Character.Humanoid[v].Value = Character.Humanoid[v].Value*RaceSizeModule[v7][i]
				end
				
				
				
				Character.Humanoid.Died:Connect(function()
					local ActiveSave = Player.ActiveSave.Value
					wait(Players.RespawnTime)
					Player:LoadCharacter()
				end)
			end
			
		end)
end)



